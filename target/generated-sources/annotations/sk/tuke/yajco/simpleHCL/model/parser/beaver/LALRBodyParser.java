package sk.tuke.yajco.simpleHCL.model.parser.beaver;

import sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolHashMapImpl;
import sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolListImpl;
import sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolListImplWithShared;
import sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolLinkedHashSetImpl;
import sk.tuke.yajco.simpleHCL.model.parser.beaver.QuotedStringUtils;
import sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolUnorderedParam;
import beaver.*;
import sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "grammar.grammar".
 */
public class LALRBodyParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short null_value = 1;
		static public final short number = 2;
		static public final short bool = 3;
		static public final short SYMBOL_91 = 4;
		static public final short SYMBOL_93 = 5;
		static public final short name = 6;
		static public final short SYMBOL_61 = 7;
		static public final short SYMBOL_44 = 8;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oLaCaEWZ0OX4V51HGG1IJHn9lFwGExx$iuhTLmyA1DllRFJ3jD1i04Fjhe84GNCH84Q76" +
		"79Y8CdEwXWRvpUyYSMdifFAEA7E0CAUhA2gnVaMfk983UfXyzKdBiNE#ZXaw1ykka$cZfJw" +
		"2OQZDe#MBivi3SV7k$e6NIHsBunOlSMNrh98$$vfUpIdgXj8iPUBNxXZS#UEUI2ywvubP$h" +
		"Ncqtebx7cnZRJMIEFeYL3#XxQUY$ce2jiTKSwOp495cqtnN#2No9psRH5O=");

	private final Action[] actions;

	public LALRBodyParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] Null = null_value.nullValue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_nullValue = _symbols[offset + 1];
					final java.lang.String nullValue = (java.lang.String) _symbol_nullValue.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Null(nullValue), (Object)nullValue));
				}
			},
			new Action() {	// [1] ExprTerm = LiteralValue.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.LiteralValue> val = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.LiteralValue>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [2] ExprTerm = CollectionValue.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.CollectionValue> val = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.CollectionValue>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [3] Expression = ExprTerm.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.ExprTerm> val = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.ExprTerm>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [4] AttributeArray1 = AttributeArray1.list Attribute.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<java.util.List<sk.tuke.yajco.simpleHCL.model.Attribute>> list = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<java.util.List<sk.tuke.yajco.simpleHCL.model.Attribute>>) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Attribute> elem = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Attribute>) _symbol_elem.value;
					 list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject());
				}
			},
			new Action() {	// [5] AttributeArray1 = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(new SymbolListImpl<sk.tuke.yajco.simpleHCL.model.Attribute>());
				}
			},
			new Action() {	// [6] Attributes = AttributeArray1.attributes
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_attributes = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<java.util.List<sk.tuke.yajco.simpleHCL.model.Attribute>> attributes = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<java.util.List<sk.tuke.yajco.simpleHCL.model.Attribute>>) _symbol_attributes.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Attributes(new java.util.ArrayList<sk.tuke.yajco.simpleHCL.model.Attribute>(attributes.getWrappedObject())), (Object)new java.util.ArrayList<sk.tuke.yajco.simpleHCL.model.Attribute>(attributes.getWrappedObject())));
				}
			},
			new Action() {	// [7] LiteralValueArray2 = LiteralValueArray2.list SYMBOL_44 LiteralValue.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<java.util.List<sk.tuke.yajco.simpleHCL.model.LiteralValue>> list = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<java.util.List<sk.tuke.yajco.simpleHCL.model.LiteralValue>>) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 3];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.LiteralValue> elem = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.LiteralValue>) _symbol_elem.value;
					 list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject());
				}
			},
			new Action() {	// [8] LiteralValueArray2 = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) new SymbolWrapper(new SymbolListImpl<sk.tuke.yajco.simpleHCL.model.LiteralValue>());
				}
			},
			new Action() {	// [9] LiteralValueArray2 = LiteralValue.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_elem = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.LiteralValue> elem = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.LiteralValue>) _symbol_elem.value;
					 java.util.List<sk.tuke.yajco.simpleHCL.model.LiteralValue> list = null; list = new SymbolListImpl<sk.tuke.yajco.simpleHCL.model.LiteralValue>(); list.add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list);
				}
			},
			new Action() {	// [10] Tupple = SYMBOL_91 LiteralValueArray2.items SYMBOL_93
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_items = _symbols[offset + 2];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<java.util.List<sk.tuke.yajco.simpleHCL.model.LiteralValue>> items = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<java.util.List<sk.tuke.yajco.simpleHCL.model.LiteralValue>>) _symbol_items.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Tupple(new java.util.ArrayList<sk.tuke.yajco.simpleHCL.model.LiteralValue>(items.getWrappedObject())), (Object)new java.util.ArrayList<sk.tuke.yajco.simpleHCL.model.LiteralValue>(items.getWrappedObject())));
				}
			},
			new Action() {	// [11] Body = Attributes.attributes
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_attributes = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Attributes> attributes = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Attributes>) _symbol_attributes.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Body(attributes.getWrappedObject()), (Object)attributes.getWrappedObject()));
				}
			},
			new Action() {	// [12] NumberLit = number.value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_value = _symbols[offset + 1];
					final java.lang.String value = (java.lang.String) _symbol_value.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.NumberLit(java.lang.Integer.valueOf(value)), (Object)java.lang.Integer.valueOf(value)));
				}
			},
			new Action() {	// [13] Attribute = name.name SYMBOL_61 Expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final java.lang.String name = (java.lang.String) _symbol_name.value;
					final Symbol _symbol_expression = _symbols[offset + 3];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Expression> expression = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Expression>) _symbol_expression.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Attribute(name, expression.getWrappedObject()), (Object)name, expression.getWrappedObject()));
				}
			},
			new Action() {	// [14] Boolean = bool.value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_value = _symbols[offset + 1];
					final java.lang.String value = (java.lang.String) _symbol_value.value;
					 return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Boolean(java.lang.Boolean.valueOf(value)), (Object)java.lang.Boolean.valueOf(value)));
				}
			},
			new Action() {	// [15] CollectionValue = Tupple.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Tupple> val = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Tupple>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [16] LiteralValue = NumberLit.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.NumberLit> val = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.NumberLit>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [17] LiteralValue = Null.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Null> val = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Null>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			},
			new Action() {	// [18] LiteralValue = Boolean.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Boolean> val = (sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Boolean>) _symbol_val.value;
					 return (Symbol) new SymbolWrapper(val.getWrappedObject());
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
