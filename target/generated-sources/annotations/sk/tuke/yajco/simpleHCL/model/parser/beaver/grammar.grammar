%package "sk.tuke.yajco.simpleHCL.model.parser.beaver";
%class "LALRBodyParser";
%import "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolListImpl";
%import "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolLinkedHashSetImpl";
%import "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolListImplWithShared";
%import "sk.tuke.yajco.simpleHCL.model.parser.beaver.QuotedStringUtils";
%import "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolHashMapImpl";
%import "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolUnorderedParam";
%import "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper";

%terminals number, SYMBOL_44, SYMBOL_93, bool, null_value, SYMBOL_61, name, SYMBOL_91;

%typeof number = "java.lang.String";
%typeof bool = "java.lang.String";
%typeof null_value = "java.lang.String";
%typeof name = "java.lang.String";
%typeof Attribute = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Attribute>";
%typeof LiteralValue = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.LiteralValue>";
%typeof LiteralValueArray2 = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<java.util.List<sk.tuke.yajco.simpleHCL.model.LiteralValue>>";
%typeof Attributes = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Attributes>";
%typeof NumberLit = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.NumberLit>";
%typeof Boolean = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Boolean>";
%typeof AttributeArray1 = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<java.util.List<sk.tuke.yajco.simpleHCL.model.Attribute>>";
%typeof Expression = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Expression>";
%typeof CollectionValue = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.CollectionValue>";
%typeof Tupple = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Tupple>";
%typeof Null = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Null>";
%typeof Body = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.Body>";
%typeof ExprTerm = "sk.tuke.yajco.simpleHCL.model.parser.beaver.SymbolWrapper<sk.tuke.yajco.simpleHCL.model.ExprTerm>";

%goal Body;

Null
	= null_value.nullValue	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Null(nullValue), (Object)nullValue)); :}
	;

ExprTerm
	= LiteralValue.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| CollectionValue.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

Expression
	= ExprTerm.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

AttributeArray1
	= AttributeArray1.list Attribute.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| 	{: return (Symbol) new SymbolWrapper(new SymbolListImpl<sk.tuke.yajco.simpleHCL.model.Attribute>()); :}
	;

Attributes
	= AttributeArray1.attributes	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Attributes(new java.util.ArrayList<sk.tuke.yajco.simpleHCL.model.Attribute>(attributes.getWrappedObject())), (Object)new java.util.ArrayList<sk.tuke.yajco.simpleHCL.model.Attribute>(attributes.getWrappedObject()))); :}
	;

LiteralValueArray2
	= LiteralValueArray2.list SYMBOL_44 LiteralValue.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| 	{: return (Symbol) new SymbolWrapper(new SymbolListImpl<sk.tuke.yajco.simpleHCL.model.LiteralValue>()); :}
	| LiteralValue.elem	{: java.util.List<sk.tuke.yajco.simpleHCL.model.LiteralValue> list = null; list = new SymbolListImpl<sk.tuke.yajco.simpleHCL.model.LiteralValue>(); list.add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list); :}
	;

Tupple
	= SYMBOL_91 LiteralValueArray2.items SYMBOL_93	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Tupple(new java.util.ArrayList<sk.tuke.yajco.simpleHCL.model.LiteralValue>(items.getWrappedObject())), (Object)new java.util.ArrayList<sk.tuke.yajco.simpleHCL.model.LiteralValue>(items.getWrappedObject()))); :}
	;

Body
	= Attributes.attributes	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Body(attributes.getWrappedObject()), (Object)attributes.getWrappedObject())); :}
	;

NumberLit
	= number.value	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.NumberLit(java.lang.Integer.valueOf(value)), (Object)java.lang.Integer.valueOf(value))); :}
	;

Attribute
	= name.name SYMBOL_61 Expression.expression	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Attribute(name, expression.getWrappedObject()), (Object)name, expression.getWrappedObject())); :}
	;

Boolean
	= bool.value	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new sk.tuke.yajco.simpleHCL.model.Boolean(java.lang.Boolean.valueOf(value)), (Object)java.lang.Boolean.valueOf(value))); :}
	;

CollectionValue
	= Tupple.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

LiteralValue
	= NumberLit.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| Null.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| Boolean.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

